#
# Auto-configuring Makefile for the Netwide Assembler.
#
# The Netwide Assembler is copyright (C) 1996 Simon Tatham and
# Julian Hall. All rights reserved. The software is
# redistributable under the license given in the file "LICENSE"
# distributed in the NASM archive.

@SET_MAKE@

top_srcdir	= @top_srcdir@
srcdir		= @srcdir@
objdir		= @builddir@
VPATH		= @srcdir@
prefix		= @prefix@
exec_prefix	= @exec_prefix@
bindir		= @bindir@
mandir		= @mandir@
datarootdir	= @datarootdir@

CC		= @CC@
CFLAGS		= @CFLAGS@
CPPFLAGS	= @CPPFLAGS@
BUILD_CFLAGS	= $(CPPFLAGS) $(CFLAGS) @DEFS@
INTERNAL_CFLAGS = -I$(srcdir) -I$(objdir) \
		  -I$(srcdir)/include -I$(objdir)/include \
		  -I$(srcdir)/x86 -I$(objdir)/x86 \
		  -I$(srcdir)/asm -I$(objdir)/asm \
		  -I$(srcdir)/disasm -I$(objdir)/disasm \
		  -I$(srcdir)/output -I$(objdir)/output
ALL_CFLAGS	= $(BUILD_CFLAGS) $(INTERNAL_CFLAGS)
LDFLAGS		= @LDFLAGS@
ALL_LDFLAGS     = $(ALL_CFLAGS) $(LDFLAGS)
LIBS		= @LIBS@

AR		= @AR@
RANLIB		= @RANLIB@
STRIP		= @STRIP@

tools		= $(top_srcdir)/tools

PERL		= perl
PERLFLAGS	= -I$(top_srcdir)/perllib -I$(srcdir)
RUNPERL         = $(PERL) $(PERLFLAGS)

EMPTY		= : >

PYTHON3		= python3

INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@

# Optional tools
NROFF		= @NROFF@
ASCIIDOC	= @ASCIIDOC@
XMLTO		= @XMLTO@
MAKENSIS	= @MAKENSIS@
XZ              = @XZ@
WINDRES         = @WINDRES@

# Optional targets
MANPAGES        = @MANPAGES@
NSIS            = @NSIS@

MKDIR_P		= @MKDIR_P@
RM_F		= rm -f
RM_RF		= rm -rf
LN_S		= @LN_S@
FIND		= find

# Binary suffixes
O		= @OBJEXT@
X		= @EXEEXT@
A		= @LIBEXT@

# Debug stuff
ifeq ($(TRACE),1)
	CFLAGS += -DNASM_TRACE
endif

# Don't delete intermediate files
.SECONDARY:

# Delete files on error
.DELETE_ON_ERROR:

.SUFFIXES:
.SUFFIXES: $(X) .$(O) .$(A) .xml .1 .c .i .s .txt .time

.PHONY: all doc install clean distclean cleaner spotless test
.PHONY: install_doc everything install_everything strip perlreq dist tags TAGS
.PHONY: nothing manpages nsis

.c.$(O):
	$(CC) -c $(ALL_CFLAGS) -o $@ $<

.c.s:
	$(CC) -S $(ALL_CFLAGS) -o $@ $<

.c.i:
	$(CC) -E $(ALL_CFLAGS) -o $@ $<

.txt.xml:
	$(ASCIIDOC) -b docbook -d manpage -o $@ $<

.xml.1:
	$(XMLTO) man --skip-validation $< 2>/dev/null

MANIFEST = @MANIFEST@

#-- Begin File Lists --#
NASM    = asm/nasm.$(O)
NDISASM = disasm/ndisasm.$(O)

PROGOBJ = $(NASM) $(NDISASM)
PROGS   = nasm$(X) ndisasm$(X)

LIBOBJ_NW = stdlib/snprintf.$(O) stdlib/vsnprintf.$(O) stdlib/strlcpy.$(O) \
	stdlib/strnlen.$(O) stdlib/strrchrnul.$(O) \
	\
	nasmlib/ver.$(O) \
	nasmlib/alloc.$(O) nasmlib/asprintf.$(O) nasmlib/errfile.$(O) \
	nasmlib/crc32.$(O) nasmlib/crc64.$(O) nasmlib/md5c.$(O) \
	nasmlib/string.$(O) nasmlib/nctype.$(O) \
	nasmlib/file.$(O) nasmlib/mmap.$(O) nasmlib/ilog2.$(O) \
	nasmlib/realpath.$(O) nasmlib/path.$(O) \
	nasmlib/filename.$(O) nasmlib/rlimit.$(O) \
	nasmlib/readnum.$(O) nasmlib/numstr.$(O) \
	nasmlib/zerobuf.$(O) nasmlib/bsi.$(O) \
	nasmlib/rbtree.$(O) nasmlib/hashtbl.$(O) \
	nasmlib/raa.$(O) nasmlib/saa.$(O) \
	nasmlib/strlist.$(O) \
	nasmlib/perfhash.$(O) nasmlib/badenum.$(O) \
	\
	common/common.$(O) \
	\
	x86/insnsa.$(O) x86/insnsb.$(O) x86/insnsd.$(O) x86/insnsn.$(O) \
	x86/regs.$(O) x86/regvals.$(O) x86/regflags.$(O) x86/regdis.$(O) \
	x86/disp8.$(O) x86/iflag.$(O) \
	\
	asm/error.$(O) \
	asm/floats.$(O) \
	asm/directiv.$(O) asm/directbl.$(O) \
	asm/pragma.$(O) \
	asm/assemble.$(O) asm/labels.$(O) asm/parser.$(O) \
	asm/preproc.$(O) asm/quote.$(O) asm/pptok.$(O) \
	asm/listing.$(O) asm/eval.$(O) asm/exprlib.$(O) asm/exprdump.$(O) \
	asm/stdscan.$(O) \
	asm/strfunc.$(O) asm/tokhash.$(O) \
	asm/segalloc.$(O) \
	asm/rdstrnum.$(O) \
	asm/srcfile.$(O) \
	macros/macros.$(O) \
	\
	output/outform.$(O) output/outlib.$(O) output/legacy.$(O) \
	output/nulldbg.$(O) output/nullout.$(O) \
	output/outbin.$(O) output/outaout.$(O) output/outcoff.$(O) \
	output/outelf.$(O) \
	output/outobj.$(O) output/outas86.$(O) \
	output/outdbg.$(O) output/outieee.$(O) output/outmacho.$(O) \
	output/codeview.$(O) \
	\
	disasm/disasm.$(O) disasm/sync.$(O)

# Warnings depend on all source files, so handle them separately
WARNOBJ   = asm/warnings.$(O)
WARNFILES = asm/warnings_c.h include/warnings.h doc/warnings.src

LIBOBJ    = $(LIBOBJ_NW) $(WARNOBJ)
ALLOBJ_NW = $(PROGOBJ) $(LIBOBJ_NW)
ALLOBJ    = $(PROGOBJ) $(LIBOBJ)

SUBDIRS  = stdlib nasmlib include config output asm disasm x86 \
	   common macros
XSUBDIRS = test doc nsis win
DEPDIRS  = . $(SUBDIRS)
#-- End File Lists --#

all: dirs
	$(MAKE) $(PROGS)

NASMLIB = libnasm.$(A)

dirs:
	$(MKDIR_P) $(SUBDIRS) $(XSUBDIRS)

$(NASMLIB): $(LIBOBJ)
	$(RM_F) $(NASMLIB)
	$(AR) cq $(NASMLIB) $(LIBOBJ)
	$(RANLIB) $(NASMLIB)

nasm$(X): $(NASM) $(MANIFEST) $(NASMLIB)
	$(CC) $(ALL_LDFLAGS) -o nasm$(X) $^ $(LIBS)

ndisasm$(X): $(NDISASM) $(MANIFEST) $(NASMLIB)
	$(CC) $(ALL_LDFLAGS) -o ndisasm$(X) $^ $(LIBS)

# These are specific to certain Makefile syntaxes...
WARNTIMES = $(WARNFILES:=.time)
WARNSRCS  = $(LIBOBJ_NW:.$(O)=.c) asm/nasm.c

#-- Begin Generated File Rules --#

# These source files are automagically generated from data files using
# Perl scripts. They're distributed, though, so it isn't necessary to
# have Perl just to recompile NASM from the distribution.

# Perl-generated source files
PERLREQ_CLEANABLE = \
	  x86/insnsb.c x86/insnsa.c x86/insnsd.c x86/insnsi.h x86/insnsn.c \
	  x86/regs.c x86/regs.h x86/regflags.c x86/regdis.c x86/regdis.h \
	  x86/regvals.c asm/tokhash.c asm/tokens.h asm/pptok.h asm/pptok.c \
	  x86/iflag.c x86/iflaggen.h \
	  macros/macros.c \
	  asm/pptok.ph asm/directbl.c asm/directiv.h \
	  $(WARNFILES) \
	  misc/nasmtok.el \
	  version.h version.mac version.mak nsis/version.nsh

# Special hack to keep config/unconfig.h from getting deleted
# by "make spotless"...
PERLREQ = config/unconfig.h $(PERLREQ_CLEANABLE)

INSDEP = x86/insns.dat x86/insns.pl x86/insns-iflags.ph x86/iflags.ph

config/unconfig.h: config/config.h.in autoconf/unconfig.pl
	$(RUNPERL) '$(srcdir)'/autoconf/unconfig.pl \
		'$(srcdir)' config/config.h.in config/unconfig.h

x86/iflag.c: $(INSDEP)
	$(RUNPERL) $(srcdir)/x86/insns.pl -fc \
		$(srcdir)/x86/insns.dat x86/iflag.c
x86/iflaggen.h: $(INSDEP)
	$(RUNPERL) $(srcdir)/x86/insns.pl -fh \
		$(srcdir)/x86/insns.dat x86/iflaggen.h
x86/insnsb.c: $(INSDEP)
	$(RUNPERL) $(srcdir)/x86/insns.pl -b \
		$(srcdir)/x86/insns.dat x86/insnsb.c
x86/insnsa.c: $(INSDEP)
	$(RUNPERL) $(srcdir)/x86/insns.pl -a \
		$(srcdir)/x86/insns.dat x86/insnsa.c
x86/insnsd.c: $(INSDEP)
	$(RUNPERL) $(srcdir)/x86/insns.pl -d \
		$(srcdir)/x86/insns.dat x86/insnsd.c
x86/insnsi.h: $(INSDEP)
	$(RUNPERL) $(srcdir)/x86/insns.pl -i \
		$(srcdir)/x86/insns.dat x86/insnsi.h
x86/insnsn.c: $(INSDEP)
	$(RUNPERL) $(srcdir)/x86/insns.pl -n \
		$(srcdir)/x86/insns.dat x86/insnsn.c

# These files contains all the standard macros that are derived from
# the version number.
version.h: version version.pl
	$(RUNPERL) $(srcdir)/version.pl h < $(srcdir)/version > version.h
version.mac: version version.pl
	$(RUNPERL) $(srcdir)/version.pl mac < $(srcdir)/version > version.mac
version.sed: version version.pl
	$(RUNPERL) $(srcdir)/version.pl sed < $(srcdir)/version > version.sed
version.mak: version version.pl
	$(RUNPERL) $(srcdir)/version.pl make < $(srcdir)/version > version.mak
nsis/version.nsh: version version.pl
	$(RUNPERL) $(srcdir)/version.pl nsis < $(srcdir)/version > nsis/version.nsh

# This source file is generated from the standard macros file
# `standard.mac' by another Perl script. Again, it's part of the
# standard distribution.
macros/macros.c: macros/macros.pl asm/pptok.ph version.mac \
	$(srcdir)/macros/*.mac $(srcdir)/output/*.mac
	$(RUNPERL) $(srcdir)/macros/macros.pl version.mac \
		$(srcdir)/macros/*.mac $(srcdir)/output/*.mac

# These source files are generated from regs.dat by yet another
# perl script.
x86/regs.c: x86/regs.dat x86/regs.pl
	$(RUNPERL) $(srcdir)/x86/regs.pl c \
		$(srcdir)/x86/regs.dat > x86/regs.c
x86/regflags.c: x86/regs.dat x86/regs.pl
	$(RUNPERL) $(srcdir)/x86/regs.pl fc \
		$(srcdir)/x86/regs.dat > x86/regflags.c
x86/regdis.c: x86/regs.dat x86/regs.pl
	$(RUNPERL) $(srcdir)/x86/regs.pl dc \
		$(srcdir)/x86/regs.dat > x86/regdis.c
x86/regdis.h: x86/regs.dat x86/regs.pl
	$(RUNPERL) $(srcdir)/x86/regs.pl dh \
		$(srcdir)/x86/regs.dat > x86/regdis.h
x86/regvals.c: x86/regs.dat x86/regs.pl
	$(RUNPERL) $(srcdir)/x86/regs.pl vc \
		$(srcdir)/x86/regs.dat > x86/regvals.c
x86/regs.h: x86/regs.dat x86/regs.pl
	$(RUNPERL) $(srcdir)/x86/regs.pl h \
		$(srcdir)/x86/regs.dat > x86/regs.h

# Extract warnings from source code. This is done automatically if any
# C files have changed; the script is fast enough that that is
# reasonable, but doesn't update the time stamp if the files aren't
# changed, to avoid rebuilding everything every time. Track the actual
# dependency by the empty file asm/warnings.time.
.PHONY: warnings
warnings: dirs
	$(RM_F) $(WARNFILES) $(WARNTIMES) asm/warnings.time
	$(MAKE) asm/warnings.time

asm/warnings.time: $(WARNSRCS) asm/warnings.pl
	$(EMPTY) asm/warnings.time
	$(MAKE) $(WARNTIMES)

asm/warnings_c.h.time: asm/warnings.pl asm/warnings.time
	$(RUNPERL) $(srcdir)/asm/warnings.pl c asm/warnings_c.h $(srcdir)
	$(EMPTY) asm/warnings_c.h.time

asm/warnings_c.h: asm/warnings_c.h.time
	@: Side effect

include/warnings.h.time: asm/warnings.pl asm/warnings.time
	$(RUNPERL) $(srcdir)/asm/warnings.pl h include/warnings.h $(srcdir)
	$(EMPTY) include/warnings.h.time

include/warnings.h: include/warnings.h.time
	@: Side effect

doc/warnings.src.time: asm/warnings.pl asm/warnings.time
	$(RUNPERL) $(srcdir)/asm/warnings.pl doc doc/warnings.src $(srcdir)
	$(EMPTY) doc/warnings.src.time

doc/warnings.src : doc/warnings.src.time
	@: Side effect

# Assembler token hash
asm/tokhash.c: x86/insns.dat x86/insnsn.c asm/tokens.dat asm/tokhash.pl \
	perllib/phash.ph
	$(RUNPERL) $(srcdir)/asm/tokhash.pl c \
		x86/insnsn.c $(srcdir)/x86/regs.dat \
		$(srcdir)/asm/tokens.dat > asm/tokhash.c

# Assembler token metadata
asm/tokens.h: x86/insns.dat x86/insnsn.c asm/tokens.dat asm/tokhash.pl \
	perllib/phash.ph
	$(RUNPERL) $(srcdir)/asm/tokhash.pl h \
		x86/insnsn.c $(srcdir)/x86/regs.dat \
		$(srcdir)/asm/tokens.dat > asm/tokens.h

# Preprocessor token hash
asm/pptok.h: asm/pptok.dat asm/pptok.pl perllib/phash.ph
	$(RUNPERL) $(srcdir)/asm/pptok.pl h \
		$(srcdir)/asm/pptok.dat asm/pptok.h
asm/pptok.c: asm/pptok.dat asm/pptok.pl perllib/phash.ph
	$(RUNPERL) $(srcdir)/asm/pptok.pl c \
		$(srcdir)/asm/pptok.dat asm/pptok.c
asm/pptok.ph: asm/pptok.dat asm/pptok.pl perllib/phash.ph
	$(RUNPERL) $(srcdir)/asm/pptok.pl ph \
		$(srcdir)/asm/pptok.dat asm/pptok.ph

# Directives hash
asm/directiv.h: asm/directiv.dat nasmlib/perfhash.pl perllib/phash.ph
	$(RUNPERL) $(srcdir)/nasmlib/perfhash.pl h \
		$(srcdir)/asm/directiv.dat asm/directiv.h
asm/directbl.c: asm/directiv.dat nasmlib/perfhash.pl perllib/phash.ph
	$(RUNPERL) $(srcdir)/nasmlib/perfhash.pl c \
		$(srcdir)/asm/directiv.dat asm/directbl.c

# Emacs token files
misc/nasmtok.el: misc/emacstbl.pl asm/tokhash.c asm/pptok.c \
		 asm/directiv.dat version
	$(RUNPERL) $< $@ "$(srcdir)" "$(objdir)"

#-- End Generated File Rules --#

perlreq: dirs
	$(MAKE) $(PERLREQ)

#-- Begin NSIS Rules --#

nsis/arch.nsh: nsis/getpearch.pl nasm$(X)
	$(PERL) $(srcdir)/nsis/getpearch.pl nasm$(X) > nsis/arch.nsh

# Should only be done after "make everything".
# The use of redirection here keeps makensis from moving the cwd to the
# source directory.
nsis: nsis/nasm.nsi nsis/arch.nsh nsis/version.nsh
	$(MAKENSIS) -Dsrcdir="$(srcdir)" -Dobjdir="$(objdir)" - < nsis/nasm.nsi

#-- End NSIS Rules --#

# Windows embedded manifest
MANIFEST_RC = win/manifest.rc
win/manifest.$(O): win/manifest.xml $(MANIFEST_RC)
	$(WINDRES) -I. -Iwin -DMANIFEST_FILE='\"$<\"' -i $(MANIFEST_RC) -o $@

# Generated manpages, also pregenerated for distribution
manpages: nasm.1 ndisasm.1

install: $(PROGS)
	$(MKDIR_P) $(DESTDIR)$(bindir)
	$(INSTALL_PROGRAM) $(PROGS) $(DESTDIR)$(bindir)/
	$(MKDIR_P) $(DESTDIR)$(mandir)/man1
	$(INSTALL_DATA) $(srcdir)/nasm.1 $(DESTDIR)$(mandir)/man1/nasm.1
	$(INSTALL_DATA) $(srcdir)/ndisasm.1 $(DESTDIR)$(mandir)/man1/ndisasm.1

clean:
	for d in . $(SUBDIRS) $(XSUBDIRS); do \
		$(RM_F) "$$d"/*.$(O) "$$d"/*.s "$$d"/*.i "$$d"/*.$(A) ; \
	done
	$(RM_F) $(PROGS)
	$(RM_F) nasm-*-installer-*.exe
	$(RM_F) tags TAGS
	$(RM_F) nsis/arch.nsh
	$(RM_F) perlbreq.si

distclean: clean
	for d in . $(SUBDIRS) $(XSUBDIRS); do \
		$(RM_F) "$$d"/.\# "$$d"/\# "$$d"/*~ "$$d"/*.bak \
			"$$d"/*.lst "$$d"/*.bin ; \
	done
	$(RM_F) test/*.$(O)
	$(RM_F) *.dep
	-sh autoconf/clean.sh || sh '$(srcdir)'/autoconf/clean.sh

cleaner:
	$(RM_F) $(PERLREQ_CL) *.1 nasm.spec
	$(MAKE) -C doc clean
	$(MAKE) distclean
	$(RM_F) */*.time

spotless: cleaner
	$(RM_F) configure autoconf/aclocal.m4 autoconf/clean.sh

strip:
	$(STRIP) --strip-unneeded $(PROGS)

TAGS:
	$(RM_F) TAGS
	$(FIND) . -name '*.[hcS]' -print | xargs etags -a

tags:
	$(RM_F) tags
	$(FIND) . -name '*.[hcS]' -print | xargs ctags -a

cscope:
	$(RM_F) cscope.out cscope.files
	$(FIND) . -name '*.[hcS]' -print > cscope.files
	cscope -b -f cscope.out

doc: doc/warnings.src
	$(MAKE) -C doc all

doc_install install_doc:
	$(MAKE) -C doc install

# Dummy target to prevent accidental invocation of the default "all" target
nothing:

always_everything: dirs
	$(MAKE) all doc

everything: always_everything
	$(MAKE) $(MANPAGES) $(NSIS) nothing

install_everything: everything install install_doc

dist:
	$(MAKE) alldeps
	$(MAKE) perlreq warnings spec $(MANPAGES)
	$(MAKE) distclean
	./autogen.sh

tar: dist
	tar -cv --exclude CVS --exclude .git -C .. -f - `basename \`pwd\`` | \
		$(XZ) -9e > ../nasm-`cat version`-`date +%Y%m%d`.tar.xz

spec: nasm.spec

ALLPERLSRC := $(shell find $(srcdir) -type f -name '*.p[lh]')

perlbreq.si: $(ALLPERLSRC)
	sed -n -r -e 's/^[[:space:]]*use[[:space:]]+([[:upper:]][^[:space:];]*).*$$/BuildRequires: perl(\1)/p' $(ALLPERLSRC) | \
	sed -r -e '/perl\((Win32.*)\)/d' | \
	sort | uniq > perlbreq.si

nasm.spec: nasm.spec.in nasm.spec.sed version.sed perlbreq.si
	sed -f version.sed -f nasm.spec.sed \
	< nasm.spec.in > nasm.spec

splint:
	splint -weak *.c

test: $(PROGS)
	cd test && $(RUNPERL) performtest.pl --nasm=../nasm *.asm

golden: $(PROGS)
	cd test && $(RUNPERL) performtest.pl --golden --nasm=../nasm *.asm

travis: $(PROGS)
	$(PYTHON3) travis/nasm-t.py run

#
# Rules to run autogen if necessary
#
configure: configure.ac autoconf/aclocal.m4
	sh autogen.sh --recheck

config.status: configure
	@if [ ! -f config.status ]; then \
		echo "*** ERROR: Need to run configure!" 1>&2 ; \
		exit 1; \
	fi
	sh config.status --recheck

Makefile: config.status Makefile.in doc/Makefile.in
	sh config.status

doc/Makefile: Makefile

config/config.h: config.status

#
# Dummy rules that changes make behavior
# (at end to avoid confusing non-GNU makes)
#
.SECONDARY:

.DELETE_ON_ERROR:

#
# Does this version of this file have external dependencies?  This definition
# will be automatically updated by mkdep.pl as needed.
#
EXTERNAL_DEPENDENCIES = 0

#
# Generate dependency information for this Makefile only.
# If this Makefile has external dependency information, then
# the dependency information will remain external, so it doesn't
# pollute the git logs.
#
Makefile.dep: $(tools)/mkdep.pl config.status $(PERLREQ)
	$(RUNPERL) $(tools)/mkdep.pl -s '$(top_srcdir)' \
		-M $(srcdir)/Makefile.in -- $(DEPDIRS)

dep: Makefile.dep

#
# This build dependencies in *ALL* makefiles, and forces all
# dependencies to be inserted inline.  For that reason, it should only
# be invoked manually or via "make dist".  It should be run before
# creating release archives.
#
alldeps: $(PERLREQ) $(tools)/syncfiles.pl $(tools)/mkdep.pl
	$(RUNPERL) $(tools)/syncfiles.pl Makefile.in Mkfiles/*.mak
	$(RUNPERL) $(tools)/mkdep.pl -i -M Makefile.in Mkfiles/*.mak -- \
		$(DEPDIRS)
	$(RM_F) *.dep
	if [ -f config.status ]; then \
		sh config.status; \
	fi

# Strip internal dependency information from all Makefiles; this makes
# the output good for git checkin
cleandeps: $(PERLREQ) $(tools)/syncfiles.pl $(tools)/mkdep.pl
	$(RUNPERL) $(tools)/syncfiles.pl Makefile.in Mkfiles/*.mak
	$(RUNPERL) $(tools)/mkdep.pl -e -M Makefile.in Mkfiles/*.mak -- \
		$(DEPDIRS)
	$(RM_F) *.dep
	if [ -f config.status ]; then \
		sh config.status; \
	fi

#-- Magic hints to mkdep.pl --#
# @object-ending: ".$(O)"
# @path-separator: "/"
# @external: "Makefile.dep"
# @include-command: "include"
# @selfrule: "1"
#-- Everything below is generated by mkdep.pl - do not edit --#
asm/assemble.$(O): asm/assemble.c asm/assemble.h asm/listing.h \
 include/compiler.h include/dbginfo.h include/disp8.h include/error.h \
 include/insns.h include/nasm.h include/nasmlib.h include/tables.h
asm/directbl.$(O): asm/directbl.c asm/directiv.h
asm/directiv.$(O): asm/directiv.c asm/assemble.h asm/eval.h asm/floats.h \
 asm/listing.h asm/preproc.h asm/stdscan.h include/compiler.h \
 include/error.h include/iflag.h include/ilog2.h include/labels.h \
 include/nasm.h include/nasmlib.h include/nctype.h output/outform.h
asm/error.$(O): asm/error.c include/compiler.h include/error.h \
 include/nasmlib.h
asm/eval.$(O): asm/eval.c asm/assemble.h asm/eval.h asm/floats.h \
 include/compiler.h include/error.h include/ilog2.h include/labels.h \
 include/nasm.h include/nasmlib.h include/nctype.h
asm/exprdump.$(O): asm/exprdump.c include/nasm.h
asm/exprlib.$(O): asm/exprlib.c include/nasm.h
asm/floats.$(O): asm/floats.c asm/floats.h include/compiler.h \
 include/error.h include/nasm.h include/nctype.h
asm/labels.$(O): asm/labels.c include/compiler.h include/error.h \
 include/hashtbl.h include/labels.h include/nasm.h include/nasmlib.h
asm/listing.$(O): asm/listing.c asm/listing.h include/compiler.h \
 include/error.h include/nasm.h include/nasmlib.h include/nctype.h \
 include/strlist.h
asm/nasm.$(O): asm/nasm.c asm/assemble.h asm/eval.h asm/floats.h \
 asm/listing.h asm/parser.h asm/preproc.h asm/quote.h asm/stdscan.h \
 include/compiler.h include/error.h include/iflag.h include/insns.h \
 include/labels.h include/nasm.h include/nasmlib.h include/nctype.h \
 include/raa.h include/saa.h include/ver.h output/outform.h
asm/parser.$(O): asm/parser.c asm/assemble.h asm/eval.h asm/floats.h \
 asm/parser.h asm/stdscan.h include/compiler.h include/error.h \
 include/insns.h include/nasm.h include/nasmlib.h include/nctype.h \
 include/tables.h
asm/pptok.$(O): asm/pptok.c asm/preproc.h include/compiler.h \
 include/hashtbl.h include/nasmlib.h include/nctype.h
asm/pragma.$(O): asm/pragma.c asm/assemble.h asm/listing.h \
 include/compiler.h include/error.h include/nasm.h include/nasmlib.h \
 include/nctype.h
asm/preproc.$(O): asm/preproc.c asm/eval.h asm/listing.h asm/preproc.h \
 asm/quote.h asm/stdscan.h asm/tokens.h include/compiler.h include/dbginfo.h \
 include/error.h include/hashtbl.h include/nasm.h include/nasmlib.h \
 include/nctype.h include/tables.h
asm/quote.$(O): asm/quote.c asm/quote.h include/compiler.h include/error.h \
 include/nasmlib.h include/nctype.h
asm/rdstrnum.$(O): asm/rdstrnum.c include/compiler.h include/nasm.h \
 include/nasmlib.h
asm/segalloc.$(O): asm/segalloc.c include/compiler.h include/insns.h \
 include/nasm.h include/nasmlib.h
asm/srcfile.$(O): asm/srcfile.c asm/srcfile.h include/compiler.h \
 include/hashtbl.h include/nasmlib.h
asm/stdscan.$(O): asm/stdscan.c asm/quote.h asm/stdscan.h include/compiler.h \
 include/error.h include/insns.h include/nasm.h include/nasmlib.h \
 include/nctype.h
asm/strfunc.$(O): asm/strfunc.c include/nasm.h include/nasmlib.h
asm/tokhash.$(O): asm/tokhash.c asm/stdscan.h include/compiler.h \
 include/hashtbl.h include/insns.h include/nasm.h
asm/warnings.$(O): asm/warnings.c asm/warnings_c.h
common/common.$(O): common/common.c include/compiler.h include/insns.h \
 include/nasm.h include/nasmlib.h
disasm/disasm.$(O): disasm/disasm.c disasm/disasm.h disasm/sync.h \
 include/compiler.h include/disp8.h include/insns.h include/nasm.h \
 include/tables.h x86/regdis.h
disasm/ndisasm.$(O): disasm/ndisasm.c disasm/disasm.h disasm/sync.h \
 include/compiler.h include/error.h include/insns.h include/nasm.h \
 include/nasmlib.h include/nctype.h include/ver.h
disasm/sync.$(O): disasm/sync.c disasm/sync.h include/compiler.h \
 include/nasmlib.h
macros/macros.$(O): macros/macros.c include/hashtbl.h include/nasmlib.h \
 include/tables.h output/outform.h
nasmlib/alloc.$(O): nasmlib/alloc.c include/compiler.h include/error.h \
 include/nasmlib.h nasmlib/alloc.h
nasmlib/asprintf.$(O): nasmlib/asprintf.c include/compiler.h \
 include/nasmlib.h nasmlib/alloc.h
nasmlib/badenum.$(O): nasmlib/badenum.c include/nasmlib.h
nasmlib/bsi.$(O): nasmlib/bsi.c include/compiler.h include/nasmlib.h
nasmlib/crc32.$(O): nasmlib/crc32.c include/compiler.h include/hashtbl.h
nasmlib/crc64.$(O): nasmlib/crc64.c include/compiler.h include/hashtbl.h \
 include/nctype.h
nasmlib/errfile.$(O): nasmlib/errfile.c include/compiler.h
nasmlib/file.$(O): nasmlib/file.c nasmlib/file.h
nasmlib/filename.$(O): nasmlib/filename.c include/compiler.h include/error.h \
 include/nasmlib.h
nasmlib/hashtbl.$(O): nasmlib/hashtbl.c include/compiler.h include/hashtbl.h \
 include/nasm.h
nasmlib/ilog2.$(O): nasmlib/ilog2.c include/ilog2.h
nasmlib/md5c.$(O): nasmlib/md5c.c include/md5.h
nasmlib/mmap.$(O): nasmlib/mmap.c nasmlib/file.h
nasmlib/nctype.$(O): nasmlib/nctype.c include/nctype.h
nasmlib/numstr.$(O): nasmlib/numstr.c include/nasmlib.h
nasmlib/path.$(O): nasmlib/path.c include/compiler.h include/error.h \
 include/nasmlib.h
nasmlib/perfhash.$(O): nasmlib/perfhash.c include/hashtbl.h \
 include/perfhash.h
nasmlib/raa.$(O): nasmlib/raa.c include/ilog2.h include/nasmlib.h \
 include/raa.h
nasmlib/rbtree.$(O): nasmlib/rbtree.c include/nasmlib.h include/rbtree.h
nasmlib/readnum.$(O): nasmlib/readnum.c include/compiler.h include/error.h \
 include/nasm.h include/nasmlib.h include/nctype.h
nasmlib/realpath.$(O): nasmlib/realpath.c include/compiler.h \
 include/nasmlib.h
nasmlib/rlimit.$(O): nasmlib/rlimit.c include/compiler.h include/nasmlib.h
nasmlib/saa.$(O): nasmlib/saa.c include/compiler.h include/nasmlib.h \
 include/saa.h
nasmlib/string.$(O): nasmlib/string.c include/compiler.h include/nasmlib.h \
 include/nctype.h
nasmlib/strlist.$(O): nasmlib/strlist.c include/strlist.h
nasmlib/ver.$(O): nasmlib/ver.c include/ver.h version.h
nasmlib/zerobuf.$(O): nasmlib/zerobuf.c include/compiler.h include/nasmlib.h
output/codeview.$(O): output/codeview.c asm/preproc.h include/compiler.h \
 include/error.h include/hashtbl.h include/md5.h include/nasm.h \
 include/nasmlib.h include/saa.h output/outlib.h output/pecoff.h version.h
output/legacy.$(O): output/legacy.c include/nasm.h output/outlib.h
output/nulldbg.$(O): output/nulldbg.c include/nasm.h include/nasmlib.h \
 output/outlib.h
output/nullout.$(O): output/nullout.c include/nasm.h include/nasmlib.h \
 output/outlib.h
output/outaout.$(O): output/outaout.c asm/eval.h asm/stdscan.h \
 include/compiler.h include/error.h include/nasm.h include/nasmlib.h \
 include/nctype.h include/raa.h include/saa.h output/outform.h \
 output/outlib.h
output/outas86.$(O): output/outas86.c include/compiler.h include/error.h \
 include/nasm.h include/nasmlib.h include/nctype.h include/raa.h \
 include/saa.h output/outform.h output/outlib.h
output/outbin.$(O): output/outbin.c asm/eval.h asm/stdscan.h \
 include/compiler.h include/error.h include/labels.h include/nasm.h \
 include/nasmlib.h include/nctype.h include/saa.h output/outform.h \
 output/outlib.h
output/outcoff.$(O): output/outcoff.c asm/eval.h include/compiler.h \
 include/error.h include/ilog2.h include/nasm.h include/nasmlib.h \
 include/nctype.h include/raa.h include/saa.h include/ver.h output/outform.h \
 output/outlib.h output/pecoff.h
output/outdbg.$(O): output/outdbg.c include/compiler.h include/dbginfo.h \
 include/insns.h include/nasm.h include/nasmlib.h include/nctype.h \
 output/outform.h output/outlib.h
output/outelf.$(O): output/outelf.c asm/eval.h asm/stdscan.h \
 include/compiler.h include/error.h include/hashtbl.h include/nasm.h \
 include/nasmlib.h include/raa.h include/rbtree.h include/saa.h \
 include/ver.h output/dwarf.h output/elf.h output/outelf.h output/outform.h \
 output/outlib.h output/stabs.h
output/outform.$(O): output/outform.c include/compiler.h output/outform.h \
 output/outlib.h
output/outieee.$(O): output/outieee.c include/compiler.h include/error.h \
 include/nasm.h include/nasmlib.h include/nctype.h include/ver.h \
 output/outform.h output/outlib.h
output/outlib.$(O): output/outlib.c include/raa.h output/outlib.h
output/outmacho.$(O): output/outmacho.c include/compiler.h include/error.h \
 include/hashtbl.h include/ilog2.h include/labels.h include/nasm.h \
 include/nasmlib.h include/nctype.h include/raa.h include/rbtree.h \
 include/saa.h include/ver.h output/dwarf.h output/macho.h output/outform.h \
 output/outlib.h
output/outobj.$(O): output/outobj.c asm/eval.h asm/stdscan.h \
 include/compiler.h include/error.h include/nasm.h include/nasmlib.h \
 include/nctype.h include/ver.h output/outform.h output/outlib.h
stdlib/snprintf.$(O): stdlib/snprintf.c include/compiler.h include/nasmlib.h
stdlib/strlcpy.$(O): stdlib/strlcpy.c include/compiler.h
stdlib/strnlen.$(O): stdlib/strnlen.c include/compiler.h
stdlib/strrchrnul.$(O): stdlib/strrchrnul.c include/compiler.h
stdlib/vsnprintf.$(O): stdlib/vsnprintf.c include/compiler.h include/error.h \
 include/nasmlib.h
x86/disp8.$(O): x86/disp8.c include/disp8.h
x86/iflag.$(O): x86/iflag.c include/iflag.h
x86/insnsa.$(O): x86/insnsa.c include/insns.h include/nasm.h
x86/insnsb.$(O): x86/insnsb.c include/insns.h include/nasm.h
x86/insnsd.$(O): x86/insnsd.c include/insns.h include/nasm.h
x86/insnsn.$(O): x86/insnsn.c include/tables.h
x86/regdis.$(O): x86/regdis.c x86/regdis.h
x86/regflags.$(O): x86/regflags.c include/nasm.h include/tables.h
x86/regs.$(O): x86/regs.c include/tables.h
x86/regvals.$(O): x86/regvals.c include/tables.h
